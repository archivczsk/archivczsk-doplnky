# -*- coding: utf-8 -*-

import base64
from Plugins.Extensions.archivCZSK.engine.httpserver import AddonHttpRequestHandler
from time import time

# #################################################################################################


class PlayliveTVHTTPRequestHandler(AddonHttpRequestHandler):
	'''
	Http request handler that implements playlive handler that extracts channel key generated by bouquet generator
	and redirects to real stream url
	'''
	def __init__(self, content_provider, addon, cache_life=900):
		AddonHttpRequestHandler.__init__(self, addon.id)
		self.live_cache = {}
		self.cp = content_provider
		self.cache_life = cache_life

	def decode_channel_key(self, path):
		if path.endswith('.m3u8'):
			path = path[:-5]

		return base64.b64decode(path.encode('utf-8')).decode("utf-8")

	def get_url_by_channel_key(self, channel_key):
		'''
		This is default implementation, that just forwards this call to content provider.
		Replace it with your own implementation if you need something different.
		'''
		return self.cp.get_url_by_channel_key(channel_key)

	def P_playlive(self, request, path):
		try:
			channel_key = self.decode_channel_key(path)

			if self.cache_life > 0 and channel_key in self.live_cache and self.live_cache[channel_key]['life'] > int(time()):
				result = self.live_cache[channel_key]['result']
			else:
				result = self.get_url_by_channel_key(channel_key)
				if self.cache_life > 0:
					self.live_cache[channel_key] = {
						'life': int(time()) + self.cache_life,
						'result': result
					}
		except:
			self.cp.log_exception()
			return self.reply_error500(request)

		return self.reply_redirect(request, result)


class OrangeTVHTTPRequestHandler(AddonHttpRequestHandler):

	def __init__(self, content_provider, addon):
		AddonHttpRequestHandler.__init__(self, addon.id)
		self.live_cache = {}
		self.cp = content_provider

	def P_playlive(self, request, path):
		try:
			channel_key = base64.b64decode(path.encode('utf-8')).decode("utf-8")
			
			if channel_key in self.live_cache and self.live_cache[channel_key]['life'] > int(time()):
				self.cp.log_debug("Returning result from cache")
				result = self.live_cache[channel_key]['result']
			else:
				result = self.cp.orangetv.get_live_link(channel_key)
				self.live_cache[channel_key] = { 'life': int(time()) + 900, 'result': result }

			location = result[0]['url']
#			self.log_debug("Resolved stream address: %s" % location )
		except:
			self.cp.log_exception()
			return self.reply_error500( request )

		return self.reply_redirect(request, location)
	
	def default_handler(self, request, path_full ):
		data = "Default handler pre orange pre path: %s" % path_full
		return self.reply_ok(request, data, "text/plain; charset=UTF-8")

